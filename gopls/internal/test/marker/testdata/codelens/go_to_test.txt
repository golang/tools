-- settings.json --
{
	"codelenses": {
		"go_to_test": true
	}
}

-- a.go --
//@codelenses()

package codelenses

func Foo() int { return 0 } //@codelens(re"()func Foo", "Go to TestFoo")

func bar() {} //@codelens(re"()func bar", "Go to Test_bar"),codelens(re"()func bar", "Go to Benchmark_bar"),codelens(re"()func bar", "Go to Fuzz_bar")

func xyz() {} //@codelens(re"()func xyz", "Go to TestXyz")

-- a1_test.go --
package codelenses

import "testing"

func TestFoo(*testing.T) {}

-- a2_test.go --
package codelenses

import "testing"

func TestXyz(*testing.T) {}

-- a3_test.go --
package codelenses_test

import "testing"

func Test_bar(*testing.T) {}

func Benchmark_bar(*testing.B) {}

func Fuzz_bar(*testing.F) {}

-- writer.go --
//@codelenses()

package codelenses

type Writer struct{}

func (w *Writer) Write() error { return nil } //@codelens(re"()func", "Go to TestWriter_Write")

func (w *Writer) Flush() {} //@codelens(re"()func", "Go to TestWriter_Flush")

-- writer_test.go --
package codelenses

import "testing"

func TestWriter_Write(*testing.T) {}

func TestWriter_Flush(*testing.T) {}
